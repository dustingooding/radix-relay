@startuml SignalBridge Architecture

!theme plain
skinparam backgroundColor white
skinparam componentStyle rectangle

package "Public API" {
  class SignalBridge {
    -storage: SqliteStorage
    --
    +new(db_path: &str)
    +encrypt_message(peer, plaintext)
    +decrypt_message(peer, ciphertext)
    +establish_session(peer, bundle)
    +generate_pre_key_bundle()
    --
    +clear_peer_session(peer)
    +clear_all_sessions()
    +reset_identity()
    --
    -ensure_keys_exist(storage)
  }
}

package "Storage Layer" {
  class SqliteStorage {
    -connection: Arc<Mutex<Connection>>
    -session_store: SqliteSessionStore
    -identity_store: SqliteIdentityStore
    -pre_key_store: SqlitePreKeyStore
    -signed_pre_key_store: SqliteSignedPreKeyStore
    -kyber_pre_key_store: SqliteKyberPreKeyStore
    --
    +new(db_path: &str)
    +initialize()
    +close()
  }

  class SqliteSessionStore {
    +session_count()
    +clear_all_sessions()
    +delete_session()
  }

  class SqliteIdentityStore {
    +identity_count()
    +clear_all_identities()
    +delete_identity()
    +get_peer_identity()
    +clear_local_identity()
  }

  class SqlitePreKeyStore {
    +pre_key_count()
    +clear_all_pre_keys()
  }

  class SqliteSignedPreKeyStore {
    +signed_pre_key_count()
    +clear_all_signed_pre_keys()
  }

  class SqliteKyberPreKeyStore {
    +kyber_pre_key_count()
    +clear_all_kyber_pre_keys()
  }
}

package "Trait Abstractions" {
  interface SignalStorageContainer {
    +session_store()
    +identity_store()
    +pre_key_store()
    +signed_pre_key_store()
    +kyber_pre_key_store()
  }

  interface ExtendedStorageOps {
    +establish_session_from_bundle()
    +encrypt_message()
    +decrypt_message()
  }

  interface ExtendedSessionStore {
    +session_count()
    +clear_all_sessions()
    +delete_session()
  }

  interface ExtendedIdentityStore {
    +identity_count()
    +clear_all_identities()
    +delete_identity()
    +get_peer_identity()
    +clear_local_identity()
  }

  interface ExtendedPreKeyStore {
    +pre_key_count()
    +clear_all_pre_keys()
  }

  interface ExtendedSignedPreKeyStore {
    +signed_pre_key_count()
    +clear_all_signed_pre_keys()
  }

  interface ExtendedKyberPreKeyStore {
    +kyber_pre_key_count()
    +clear_all_kyber_pre_keys()
  }
}

package "libsignal Protocol" {
  interface SessionStore
  interface IdentityKeyStore
  interface PreKeyStore
  interface SignedPreKeyStore
  interface KyberPreKeyStore
}

' Relationships
SignalBridge --> SqliteStorage : uses

SqliteStorage ..|> SignalStorageContainer
SqliteStorage ..|> ExtendedStorageOps

SqliteStorage *-- SqliteSessionStore
SqliteStorage *-- SqliteIdentityStore
SqliteStorage *-- SqlitePreKeyStore
SqliteStorage *-- SqliteSignedPreKeyStore
SqliteStorage *-- SqliteKyberPreKeyStore

SqliteSessionStore ..|> SessionStore
SqliteSessionStore ..|> ExtendedSessionStore

SqliteIdentityStore ..|> IdentityKeyStore
SqliteIdentityStore ..|> ExtendedIdentityStore

SqlitePreKeyStore ..|> PreKeyStore
SqlitePreKeyStore ..|> ExtendedPreKeyStore

SqliteSignedPreKeyStore ..|> SignedPreKeyStore
SqliteSignedPreKeyStore ..|> ExtendedSignedPreKeyStore

SqliteKyberPreKeyStore ..|> KyberPreKeyStore
SqliteKyberPreKeyStore ..|> ExtendedKyberPreKeyStore

note right of SignalBridge
  **Security API:**
  • clear_peer_session() - "Don't trust Bob"
  • clear_all_sessions() - "Don't trust anyone"
  • reset_identity() - "I'm compromised"
end note

note bottom of SqliteStorage
  **Persistence:**
  • SQLite database storage
  • Maintains state across restarts
  • Schema versioning
end note

note left of ExtendedStorageOps
  **Key Management:**
  • ensure_keys_exist() generates
    only missing keys
  • Preserves existing keys
  • Conditional generation logic
end note

@enduml
